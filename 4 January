2870. Minimum Number of Operations to Make Array Empty (Leetcode)

Time Complexity : O(N)
Space Complexity : O(N)

[Concept]:

We can delete two or three numbers from the array, if the array conatains only even then we can go with 2 but thats not alwasys the case
so, lets try it using three numbers ,
when a number is divisible by 3 it 's remainder set is : {0,1,2}
so if we have the ocuurence of all the elements in the array, we can calculate the min nummver of operations

--> if the frequency of a number is exactly divisible by 3 i.e., (freq % 3 == 0)
    it means we can delete the number in triplets using second operations in (freq / 3) number of operations
    min number of oprns in this case : freq / 3 + 0 = (freq / 3)

--> if the frequency of a number is leaves remainder 1 on dividing by 3 i.e., (freq % 3 == 1)
    it means we can delete the number in triplets using second operations in (freq / 3) number of operatios and extra 1 operations for the 1 element left (min number of oprns in this case)
    min number of oprns in this case : (freq / 3 + 1)

-->if the frequency of a number is leaves remainder 2 on dividing by 3 i.e., (freq % 3 == 2)
    it means we can delete the number in triplets using second operations in (freq / 3) number of operatios and using the first operations for the 2(same) elements left (min number of oprns in this case)
    min number of oprns in this case : (freq / 3 + 1) 

we do the above checks for all freqencies and add the min number of operations according to the case .


[Code]:

int minOperations(vector<int>& nums) {
    int opr = 0;
    unordered_map<int,int> mp;
    for(auto i : nums) mp[i]++;

    for(auto i : mp) {
        int val = i.second;
        if(val < 2) return -1;
        else if(val%3 == 0) opr += val/3;
        else if(val%3 == 1) opr += val/3 + 1;
        else if(val%3 == 2) opr += val/3 + 1;
    }
    return opr;
}
